// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "url-shortener/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// URLRepository is an autogenerated mock type for the URLRepository type
type URLRepository struct {
	mock.Mock
}

// CreateURL provides a mock function with given fields: ctx, url
func (_m *URLRepository) CreateURL(ctx context.Context, url domain.URL) error {
	ret := _m.Called(ctx, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.URL) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteURL provides a mock function with given fields: ctx, shortCode
func (_m *URLRepository) DeleteURL(ctx context.Context, shortCode string) error {
	ret := _m.Called(ctx, shortCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShortCodeByFullURL provides a mock function with given fields: ctx, fullURL
func (_m *URLRepository) GetShortCodeByFullURL(ctx context.Context, fullURL string) (string, error) {
	ret := _m.Called(ctx, fullURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, fullURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fullURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURLByShortCode provides a mock function with given fields: ctx, shortCode
func (_m *URLRepository) GetURLByShortCode(ctx context.Context, shortCode string) (domain.URL, error) {
	ret := _m.Called(ctx, shortCode)

	var r0 domain.URL
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.URL); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Get(0).(domain.URL)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseURLNoOfHits provides a mock function with given fields: ctx, shortCode
func (_m *URLRepository) IncreaseURLNoOfHits(ctx context.Context, shortCode string) error {
	ret := _m.Called(ctx, shortCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListURL provides a mock function with given fields: ctx, shortCodeFilter, fullURLKeywordFilter
func (_m *URLRepository) ListURL(ctx context.Context, shortCodeFilter string, fullURLKeywordFilter string) ([]domain.URL, error) {
	ret := _m.Called(ctx, shortCodeFilter, fullURLKeywordFilter)

	var r0 []domain.URL
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.URL); ok {
		r0 = rf(ctx, shortCodeFilter, fullURLKeywordFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shortCodeFilter, fullURLKeywordFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
